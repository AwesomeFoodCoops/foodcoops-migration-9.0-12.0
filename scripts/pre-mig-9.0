#!/usr/bin/env python
# -*- coding: utf-8 -*-

import click
import click_odoo
from config import *

import logging
_logger = logging.getLogger(__name__)


def _deactivate_custom_views(env):
    '''
    Gets views that are not linked to any
    installed module (no ir.model.data)
    '''

    ir_model_data = env['ir.model.data'].search([
        ('model', '=', 'ir.ui.view')])
    view_ids = env['ir.ui.view'].search([
        ('id', 'not in', ir_model_data.mapped('res_id'))])
    for view in view_ids:
        _logger.info('Deactivating custom view (%s): %s' % (
            view.type, view.name))
        view.write({
            'active': False,
            'name': '%s | Deactivated because of migration' % view.name,
        })


def _deactivate_orphan_views(env, modules=None):
    '''
    Orphan views are views of uninstalled modules
    For some reason OpenUpgrade keept them.
    '''
    if modules is None:
        uninstalled_modules = env['ir.module.module'].search([
            ('state', 'not in', ['installed', 'to upgrade'])])
        modules = uninstalled_modules.mapped('name')
    # Search and deactivate
    ir_model_data = env['ir.model.data'].search([
        ('module', 'in', modules),
        ('model', '=', 'ir.ui.view')])
    view_ids = env['ir.ui.view'].search([
        ('id', 'in', ir_model_data.mapped('res_id'))])
    for view in view_ids:
        _logger.info('Deactivating orphan view (%s): %s' % (
            view.type, view.name))
        view.write({
            'active': False,
            'name': '%s | Deactivated orphan view' % view.name,
        })


@click.command()
@click_odoo.env_options(default_log_level='error')
def main(env):
    print('Pre cleaning started...')

    modules_to_uninstall = (
        MODULES_TO_UNINSTALL
        + MODULES_PENDING_MIGRATION
        + [i[0] for i in MODULES_TO_REPLACE]
    )

    # List of modules that we couldn't uninstall at this step
    modules_not_uninstalled = []

    for module in modules_to_uninstall:
        # Skip modules that are depended by others,
        # because that might trigger a chain uninstall,
        # removing modules we don't want to remove.
        # These will be uninstalled by post-clean.
        depended_by = env['ir.module.module'].search([
            ('state', 'in', ['installed', 'to upgrade']),
            ('dependencies_id', '=', module)])
        if depended_by:
            print((
                'Skipping module uninstall: %s, '
                'because it\'s dependend by: %s'
                ) % (module, depended_by.mapped('name')))
            modules_not_uninstalled.append(module)
            continue
        # Find module
        module_id = env['ir.module.module'].search([('name', '=', module)])
        if not module_id:
            print('Module not found: %s' % module)
            continue
        # Skip modules that are not installed
        if module_id.state not in ['installed', 'to upgrade']:
            print('Skipping module uninstall: %s. Not installed.' % module)
            continue
        # Hack because otherwise it's not uninstalled
        if module_id.state == 'to upgrade':
            module_id.state = 'installed'
        # Uninstall module
        print('Uninstalling module: %s..' % module)
        module_id.button_immediate_uninstall()

    # Deactivate views of modules we couldn't uninstall
    _deactivate_orphan_views(env, modules_not_uninstalled)
    _deactivate_orphan_views(env)
    _deactivate_custom_views(env)

    print('Pre cleaning finished successfully!')


if __name__ == '__main__':
    main()
