#!/usr/bin/env python
from __future__ import print_function
import click
import click_odoo
from config import *

import logging
_logger = logging.getLogger(__name__)


def _uninstall_modules(env):
    '''
    Uninstall all planned to uninstall modules.
    Some modules on this list might already have
    been uninstalled by pre-clean.

    But it's ok, we check again and if they're
    present we remove them.
    '''
    ir_module = env['ir.module.module']

    modules_to_uninstall = (
        MODULES_TO_UNINSTALL
        + MODULES_PENDING_MIGRATION
        + [i[0] for i in MODULES_TO_REPLACE]
    )

    module_ids = ir_module.search([
        ('name', 'in', modules_to_uninstall),
        ('state', 'in', ['installed', 'to upgrade', 'to remove']),
    ])

    # Force installed state
    # Because odoo won't uninstall modules in 'to upgrade' state
    module_ids.write({'state': 'installed'})
    _logger.info('Uninstalling modules: %s' % module_ids.mapped('name'))
    module_ids.button_immediate_uninstall()


def _apply_post_fixes(env):
    '''
    Post migration required by some modules
    TODO: Move this to a separate file
    '''

    # Fix modules left in inconsistent states
    module_ids = env['ir.module.module'].search([
        ('state', 'in', ['to upgrade'])])
    module_ids.write({'state': 'installed'})

    # pos_payment_terminal: field renamed
    env.cr.execute("""
        UPDATE account_journal SET pos_terminal_payment_mode = payment_mode;
    """)

    # coop_default_pricetag: field renamed
    env.cr.execute("""
        UPDATE product_template SET print_category_id = category_print_id
    """)

    # TODO: reset login of admin and system
    env.ref('base.user_admin').write({'login': 'admin'})
    env.ref('base.user_root').write({'login': '__system__'})

    # Reload translations terms
    _logger.info('Reloading translation terms..')
    langs = [l[0] for l in env['res.lang'].get_installed()]
    modules = env['ir.module.module'].search([('state', '=', 'installed')])
    modules.with_context(overwrite=True)._update_translations(langs)
    env.cr.execute('ANALYZE ir_translation')

    # Display name of categories not considering languages
    # https://www.druidoo.io/web#id=2149&action=367&model=project.task&view_type=form&menu_id=237
    env['product.category'].search([])._compute_complete_name()

    # Fix image resizing
    # https://www.druidoo.io/web#id=2164&action=367&model=project.task&view_type=form&menu_id=237
    # We don't use prefetch because it raises errors..
    # We fail silently because it's not that important..
    _logger.info('Recomputing partner images..')
    partners = env['res.partner'].with_context(prefetch_fields=False).search([
        ('image', '!=', False)])
    for partner in partners:
        try:
            partner.write({'image': partner.image})
        except Exception as e:
            _logger.warning('Unable to recompute partner image: %s' % partner)
            _logger.error(repr(e))
            pass

    # Remove wrongly generated website templates that are not migrated
    # these are just copies from the old views (bug in openupgrade?)
    if 'website_id' in env['ir.ui.view']._fields:
        website_views = env['ir.ui.view'].with_context(active_test=False).search([
            ('website_id', '!=', False), ('key', '!=', False)])
        if website_views:
            _logger.info('Removing website views: %s' % website_views)
            website_views.unlink()

    # Remove theme_bootswatch.theme_* views
    # For some reason they were removed in 12.0 but this is not managed
    # by the database upgrade script. (Bug in openupgrade?)
    if 'key' in env['ir.ui.view']._fields:
        theme_views = env['ir.ui.view'].with_context(active_test=False).search([
            ('key', 'ilike', 'theme_bootswatch.theme_%')])
        if theme_views:
            _logger.info('Removing bootswatch theme_* views: %s' % theme_views)
            theme_views.unlink()


def _apply_configs(env):
    '''
    Applies configurations needed in 12.0
    '''

    company_ids = env['res.company'].search([])
    pos_configs = env['pos.config'].search([])

    # Pos configurations
    for config in pos_configs:
        if config.pricelist_id:
            config.write(
                {
                    'use_pricelist': True,
                    'available_pricelist_ids': [(4, config.pricelist_id.id)],
                }
            )

    # web_m2x_options config
    param = env['ir.config_parameter'].sudo().set_param(
        'web_m2x_options.create', 'False')

    # Configure account_check_deposit to validate moves automatically
    if 'check_deposit_post_move' in company_ids._fields:
        company_ids.write({'check_deposit_post_move': True})

    # Set default report layout
    company_ids.write({
        'external_report_layout_id': env.ref('web.external_layout_boxed').id,
    })

    # New user group in pos_access_right. We set it to all pos users by default
    # https://www.druidoo.io/web#id=2085&action=367&model=project.task&view_type=form&menu_id=237
    user_ids = env['res.users'].search([])
    users_to_add = user_ids.filtered(
        lambda u: u.has_group('point_of_sale.group_pos_user'))
    group_id = env.ref('pos_access_right.group_payment')
    for user in users_to_add:
        _logger.info('Adding "%s" group to %s' % (group_id.name, user.name))
        user.write({"groups_id": [(4, group_id.id)]})


def _purge_database(env):
    ''' Uses database_cleanup module to purge some data '''
    if 'cleanup.purge.wizard.module' not in env:
        _logger.error('Database Cleanup module not found. No purging')
        return
    for purge in ['module', 'data', 'property', 'model', 'table', 'column']:
        _logger.info('Purging :: %s' % purge)
        wizard = env['cleanup.purge.wizard.%s' % purge].create({})
        for line in wizard.purge_line_ids:
            try:
                _logger.info('Purging %s: %s..' % (purge, line.name))
                line.purge()
            except Exception as e:
                _logger.error(repr(e))
                pass


@click.command()
@click_odoo.env_options(default_log_level='error')
def main(env):
    # We try to uninstall modules one last time
    # in case some are left to remove
    _uninstall_modules(env)
    _purge_database(env)

    _apply_post_fixes(env)
    _apply_configs(env)


if __name__ == '__main__':
    main()
