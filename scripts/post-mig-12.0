#!/usr/bin/env python
from __future__ import print_function
import click
import click_odoo
from config import *

import logging
_logger = logging.getLogger(__name__)


def _report_modules_states(env):
    # Modules to install
    modules = env['ir.module.module'].search([
        ('state', '=', 'to install')])
    if modules:
        _logger.warning(
            '\n\nModules to install:\n%s' % '\n'.join(modules.mapped('name')))
    # Modules to update
    modules = env['ir.module.module'].search([
        ('state', '=', 'to upgrade')])
    if modules:
        _logger.warning(
            '\n\nModules to update:\n%s' % '\n'.join(modules.mapped('name')))
    # Modules to remove
    modules = env['ir.module.module'].search([
        ('state', '=', 'to remove')])
    if modules:
        _logger.warning(
            '\n\nModules to remove:\n%s' % '\n'.join(modules.mapped('name')))


def _deactivate_no_update(env):
    '''
    We use this method to deactivate the no_update
    of some models like reports, actions, etc..

    Because during a migration we really want to
    update them.
    '''
    to_update = [
        'ir.cron',
        'ir.ui.view',
        'ir.actions.client',
        'res.groups',
    ]

    model_data = env['ir.model.data'].search([
        ('model', 'in', to_update),
        ('noupdate', '=', True)])
    model_data.write({'noupdate': False})


def _upgrade_modules(env):
    '''
    Upgrade all installed modules, with exception
    of those that we plan to uninstall, because we
    may not have them in the sources.

    Idea is we upgrade modules first, so that our
    dependency tree no longer depends on modules
    that are planned to be uninstalled.
    '''
    ir_module = env['ir.module.module']
    modules_to_uninstall = (
        MODULES_TO_UNINSTALL
        + MODULES_PENDING_MIGRATION
        + [i[0] for i in MODULES_TO_REPLACE]
    )
    modules = ir_module.search([
        ('state', 'in', ['to upgrade']),
        ('name', 'not in', modules_to_uninstall)])
    if modules:
        _logger.info('Upgrading modules: %s', modules.mapped('name'))
        modules.button_immediate_upgrade()


def _uninstall_modules(env):
    '''
    Uninstall all planned to uninstall modules.
    Some modules on this list might already have
    been uninstalled by pre-clean.

    But it's ok, we check again and if they're
    present we remove them.
    '''
    ir_module = env['ir.module.module']

    modules_to_uninstall = (
        MODULES_TO_UNINSTALL
        + MODULES_PENDING_MIGRATION
        + [i[0] for i in MODULES_TO_REPLACE]
    )

    module_ids = ir_module.search([
        ('name', 'in', modules_to_uninstall),
        ('state', 'in', ['installed', 'to upgrade', 'to remove']),
    ])

    # Force installed state
    # Because odoo won't uninstall modules in 'to upgrade' state
    module_ids.write({'state': 'installed'})
    _logger.info('Uninstalling modules: %s' % module_ids.mapped('name'))
    module_ids.button_immediate_uninstall()


def _install_modules(env):
    '''
    Install all planned to install modules
    '''
    ir_module = env['ir.module.module']
    modules_to_install = (
        MODULES_TO_INSTALL
        + [i[1] for i in MODULES_TO_REPLACE]
    )

    module_ids = env['ir.module.module'].search([
        ('name', 'in', modules_to_install)])

    missing_modules = set(modules_to_install) - set(module_ids.mapped('name'))
    if missing_modules:
        _logger.error(
            'Trying to install modules that are missing: '
            '%s' % missing_modules)

    _logger.info('Installing modules: %s' % module_ids.mapped('name'))
    module_ids.button_immediate_install()


@click.command()
@click_odoo.env_options(default_log_level='error')
def main(env):
    _logger.info('Starting post clean..')
    ir_module = env['ir.module.module']
    ir_module.update_list()
    _logger.info('Module list updated...')

    _deactivate_no_update(env)

    _upgrade_modules(env)
    _uninstall_modules(env)
    _install_modules(env)


if __name__ == '__main__':
    main()
